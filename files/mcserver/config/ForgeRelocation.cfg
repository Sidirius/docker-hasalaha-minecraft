# Configuration file

##########################################################################################################
# General
#--------------------------------------------------------------------------------------------------------#
# Basic settings
##########################################################################################################

General {
    I:moveLimit=2048
}


##########################################################################################################
# Latched Sets
#--------------------------------------------------------------------------------------------------------#
# Used to define which pairs of blocks will be stuck together. 
# Latched sets will always move in pairs, even if only one of them are actually connected to a block. 
# 'block1 -> block2' means that if block1 is moved, any block2 connected to it will also move. 
# However, moving block2 does not move block1. To do that, you must also register block2 -> block1. 
# Sets are defined using the syntax of key -> value. 
# Possible keys and values:
#     '<modID>:<blockname>' - to assign block from a mod for every meta. 
#     '<modID>:<blockname>m<meta>' - to assign block from mod for specific meta. 
# 
##########################################################################################################

"Latched Sets" {
    S:"latch registry" <
        bed -> bed
        wooden_door -> wooden_door
        iron_door -> iron_door
     >
}


##########################################################################################################
# Power
#--------------------------------------------------------------------------------------------------------#
# Settings that manage the power use of motors. The cost of moving n blocks is initial + n * load
##########################################################################################################

Power {
    D:capacity=1000.0
    D:initial=40.0
    D:load=10.0
}


##########################################################################################################
# Rendering
#--------------------------------------------------------------------------------------------------------#
# Settings related to block rendering
##########################################################################################################

Rendering {
    B:"Simple frame model"=true
}


##########################################################################################################
# Tile Movers
#--------------------------------------------------------------------------------------------------------#
# Used to configure which registered Tile Mover is used for a block. Key-Value pairs are defined using 
# the syntax key -> value. 
# Most blocks are configurable, but some mods may have opted to lock which handlers can be used for its 
# blocks.
# Possible keys: 
#     'default' - to assign default handler. 
#     'mod:<modID>' - to assign every block from a mod. 
#     '<modID>:<blockname>' - to assign block from a mod for every meta. 
#     '<modID>:<blockname>m<meta>' - to assign block from mod for specific meta. 
# 
# Available tile movers:
#     'saveload' - Saves the tile and then reloads it in the next position. Reliable but CPU intensive.
#     'coordpush' - Physically changes the location of tiles. Works if tiles do not cache their position.
#     'static' - Setting this disables movement for the specified block.
#     'FMP' - Tile mover for Forge Multipart
# 
# Movers locked via API:
#     mod:ForgeMultipart -> FMP
# 
##########################################################################################################

"Tile Movers" {
    S:"mover registry" <
        default -> saveload
        mod:minecraft -> coordpush
        mod:Relocation -> coordpush
        mod:ComputerCraft -> coordpush
        mod:EnderStorage -> coordpush
        mod:ChickenChunks -> coordpush
        mod:Translocator -> coordpush
        mod:ForgeMultipart -> FMP
     >
}


